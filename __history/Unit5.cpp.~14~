//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include "ITFormDialog.h"
#include "STFormDialog.h"
#include "CharterDialog.h"
#include "Unit5.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm5 *Form5;
double end_time = 0;
double mean_queue_size = 0;
double mean_system_size = 0;
//-------------------------------
double uniform(double a, double b)
{ int n;
  double x;

  n=rand()%(int)pow(2.0,15);
  x=a+(b-a)*n/pow(2.0,15);
  return x;
}

double exponential(double r)
{ double x,y;
  //srand(1);
  x=uniform(0,1);
  if (x<=1e-10)
	  x=1e-10;
  y=-log(1-x)/r;
  return(y);
}

double normal(double m, double v)
{ double x1, x2, y;
  double pi = 3.14159;
  //srand(1);
  x1=uniform(0,1);
  x2=uniform(0,1);
  if (x2<=1e-10)
	  x2=1e-10;
  y=m+v*cos(2*pi*x1)*sqrt((-2)*log(x2));
  return(y);
}

int location(int low,int high,double time,double S[1000])
{ int mid ;

  if (low > high )
	  return low ;
  else { mid=(low+high)/2;
		  if (time == S[mid])
			  return mid+1;
		  else if (time < S[mid])
				   return location(low,mid-1,time,S);
			  else return location(mid+1,high,time,S);
  }
 }

int top = -1;
double stack_time[1000];
AnsiString stack_event[1000];

void stack_push(AnsiString event,double time)
{ int i, j, mid;

  i=0;
  j=location(0,top,time,stack_time);
  for (i = top + 1; i > j; i--){
		stack_time[i] = stack_time[i-1];
		stack_event[i] = stack_event[i-1];
  }
  stack_time[j] = time;
  stack_event[j] = event;
  top++;
}

AnsiString next_event;
double next_event_time;
void stack_pop()
{ int i;

  next_event=stack_event[0];
  next_event_time=stack_time[0];
  for (i = 0; i < top; i++){
		stack_time[i] = stack_time[i+1];
		stack_event[i] = stack_event[i+1];
  }
  if (top>-1)
	  top--;
}

double now, previous_event_time;
int queue_size, system_size;
double sum_queue, sum_system;
void statistics()
{
   sum_queue += (now-previous_event_time)*queue_size;
   sum_system += (now-previous_event_time)*system_size;
   if (now>0) {
	  mean_queue_size = sum_queue/now;
	  mean_system_size = sum_system/now;
   }
   Form5->MQSize->Text = FloatToStrF(mean_queue_size,ffFixed,7,6);
   Form5->MSSize->Text = FloatToStrF(mean_system_size,ffFixed,7,6);
 }

 void arrival()
{ double x, next_arrival;

  now = next_event_time;
  if (Form5->ITComboBox->ItemIndex==0)
	  x = uniform(Form5->paraIT1,Form5->paraIT2);
  else if (Form5->ITComboBox->ItemIndex==1)
	  x = exponential(Form5->paraIT1);
  else if (Form5->ITComboBox->ItemIndex==2)
	  x = normal(Form5->paraIT1, Form5->paraIT2);
  next_arrival = now + x;
  stack_push("arrival",next_arrival);
  //Print_Scheduler();
  if (system_size==0)
	  next_event = "service";
  else stack_pop();
  statistics();
  previous_event_time=now;

  Charter->Series1->AddXY(now,queue_size,0,clRed);
  queue_size ++;
  system_size ++;
  //Print_View("A");
  Charter->Series1->AddXY(now,queue_size,0,clRed);
}
void service()
{ double x, next_departure;

  now = next_event_time;
  if (Form5->STComboBox->ItemIndex==0)
	  x = uniform(Form5->paraST1, Form5->paraST2);
  else if (Form5->STComboBox->ItemIndex==1)
	  x = exponential(Form5->paraST1);
  else if (Form5->STComboBox->ItemIndex==2)
	  x = normal(Form5->paraST1, Form5->paraST2);
  next_departure = now + x;
  stack_push("departure",next_departure);
  statistics();
  previous_event_time=now;
  //Print_Scheduler();

  Charter->Series1->AddXY(now,queue_size,0,clRed);
  queue_size --;
  stack_pop();
  //Print_View("S");
  Charter->Series1->AddXY(now,queue_size,0,clRed);
}
void departure()
{
  now = next_event_time;
  Charter->Series1->AddXY(now,queue_size,0,clRed);
  statistics();
  previous_event_time=now;
  system_size --;
  //Print_Scheduler();
  if (queue_size>0)
	  next_event = "service";
  else stack_pop();

  //Print_View("D");
  Charter->Series1->AddXY(now,queue_size,0,clRed);
  Charter->Series2->AddXY(now,mean_queue_size,0,clBlue);
}
void initialization()
{
  now = 0;
  queue_size = 0;
  system_size = 0;
  sum_queue = 0;
  sum_system = 0;
  next_event = "arrival";
  next_event_time = 0;
  previous_event_time = 0;
  Form5->MQSize->Text = "0";
  Form5->MSSize->Text = "0";
  top=-1;
  //Form1->ComboBox1->ItemIndex==1;
  //Form1->ComboBox1->Text="Exponential R.V.";
  //Form1->ComboBox2->ItemIndex==1;
  //Form1->ComboBox2->Text="Exponential R.V.";
}

int event_ID()
{
  if (next_event == "arrival")
	  return 0;
  else if (next_event == "service")
	  return 1;
  else if (next_event == "departure")
	  return 2;
}
 //---------------------------------------------------------------------------
__fastcall TForm5::TForm5(TComponent* Owner)
	: TForm(Owner)
{
	SimulationTEdit->Text = 10000;
	end_time = 10000;

}
//---------------------------------------------------------------------------

void __fastcall TForm5::updateParaIT(double p1, double p2){
	this->paraIT1 = p1;
	this->paraIT2 = p2;

	Label5->Caption = paraIT1;
	return ;
}

void __fastcall TForm5::updateParaST(double p1, double p2){
	this->paraST1 = p1;
	this->paraST2 = p2;

	Label5->Caption = FloatToStr(paraST1) + " " + FloatToStr(paraST2);
	return ;
}

void __fastcall TForm5::SimulationTEditChange(TObject *Sender)
{
	if(SimulationTEdit->Text == ""){
		end_time = 0;
		return ;
	}
	end_time = StrToFloat(SimulationTEdit->Text);
}
//---------------------------------------------------------------------------



void __fastcall TForm5::MQSizeChange(TObject *Sender)
{
	if(MQSize->Text == ""){
		mean_queue_size = 0;
		return ;
	}
	mean_queue_size = StrToFloat(MQSize->Text);
}
//---------------------------------------------------------------------------

void __fastcall TForm5::MSSizeChange(TObject *Sender)
{
	if(MSSize->Text == ""){
		mean_system_size = 0;
		return ;
	}
	mean_system_size = StrToFloat(MSSize->Text);
}
//---------------------------------------------------------------------------



void __fastcall TForm5::ITComboBoxChange(TObject *Sender)
{
	ITForm->Show();
}
//---------------------------------------------------------------------------



void __fastcall TForm5::STComboBoxChange(TObject *Sender)
{
	STForm->Show();
}
//---------------------------------------------------------------------------

void __fastcall TForm5::RunClick(TObject *Sender)
{
	Charter->Series1->Pen->Width = 3;
    Charter->Series2->Pen->Width = 3;
	Charter->Series1->Clear();
	Charter->Series2->Clear();
	Charter->Chart1->BottomAxis->Automatic=true;
	Charter->Chart1->LeftAxis->Automatic=true;
	Charter->Chart1->Title->Caption="";
	Charter->Chart1->LeftAxis->Title->Caption="Queue Size";
	Charter->Chart1->BottomAxis->Title->Caption="Time (sec)";

	/*for(int i = 0; i <  end_time; i+= 100){

		Charter->Series1->AddXY(i, normal(5,10));
		//Charter->Series1->AddXY(i, exponential(1));
	}

	for(int i = 0; i < end_time; i+= 100){
		Charter->Series2->AddXY(i, normal(5,10));
	}     */

	initialization();
  //Edit5->Text = "";
  //Edit6->Text = "";
  //end_time = StrToFloat(Edit->Text);
  while (now < end_time) {
	  switch (event_ID()) {
			 case 0:
				  arrival();
				  break;
			 case 1:
				  service();
				  break;
			 case 2:
				  departure();
				  break;
	  }
	  Charter->Chart1->Refresh();
	  Application->ProcessMessages();
	  if (int(now)%100==0)    ;
		  //Edit6->Text = FloatToStrF(now,ffFixed,7,3);
  }
  //fclose(pi);
  //Edit5->Text = "End";
}
//---------------------------------------------------------------------------

void __fastcall TForm5::PlotClick(TObject *Sender)
{
	Charter->Show();
}
//---------------------------------------------------------------------------


